//
//  {{ module_info.file_name }}
//  {{ module_info.project_name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright Â© {{ year }} {{ developer.company }}. All rights reserved.
//

import Foundation
import UIKit
import FBSDKCoreKit
import FBSDKLoginKit

class FacebookProviderImpl: MainProviderImpl {
    
    fileprivate let kFacebookURL = "facebook://app"

}

//MARK: SocialProviderProtocol
extension FacebookProviderImpl : SocialProviderProtocol {
    
    func isUserAlreadyLogged () -> Bool {
        return self.isUserLogged()
    }

    func login (with completion: @escaping (SocialUser, String) -> Void) {
        self.completion = completion
        self.login()
    }
    
    func loginWithPublishActions (with completion: @escaping (SocialUser, String) -> Void) {
        self.completion = completion
        self.loginWithPublishActions()
    }
    
    func logout () {
        
    }
}

//MARK: FacebookProviderImpl
extension FacebookProviderImpl {

    fileprivate func isUserLogged() -> Bool {
        return FBSDKAccessToken.current() != nil && FBSDKAccessToken.current().hasGranted("publish_actions")
    }
    
    fileprivate func userId () -> String? {
        return FBSDKAccessToken.current()?.userID
    }

    fileprivate func login() {
        if let _ = FBSDKAccessToken.current() {
            obtainFBUserEmail()
        } else {
            let fbLogin = FBSDKLoginManager()
            self.hud.hide()
            fbLogin.logIn(withReadPermissions: ["public_profile", "email"], from: router.navigationController, handler: {[weak self] (res, err) in
                guard let `self` = self else { return }
                if let error = err {
                    self.hud.hide()
                    NSLog("\(error.localizedDescription)");
                } else if let result = res {
                    if !result.isCancelled {
                        self.obtainFBUserEmail()
                    } else {
                        self.hud.hide()
                    }
                }
            })
        }
    }
    
    fileprivate func loginWithPublishActions () {
        let fbLogin = FBSDKLoginManager()
        self.hud.hide()
        
        fbLogin.logIn(withPublishPermissions: ["publish_actions"], from: router.navigationController) {[weak self]  (res, err) in
            guard let `self` = self else { return }
            if let error = err {
                self.hud.hide()
                NSLog("\(error.localizedDescription)");
            } else if let result = res {
                if !result.isCancelled {
                    self.obtainFBUserEmail()
                } else {
                    self.hud.hide()
                }
            }
        }
    }
    
    fileprivate func obtainFBUserEmail() {
        if let request = FBSDKGraphRequest.init(graphPath: "/me", parameters: ["fields" : "id, email, first_name, last_name"]) {
            request.start(completionHandler: {[weak self] (connection, result, error) in
                guard let `self` = self else { return }

                if let userDict = result as? Dictionary<String, String> {
                    if let completion = self.completion {
                        let userId = userDict["id"] ?? ""
                        let photoURL = URL(string: "http://graph.facebook.com/\(userId)/picture?width=\(self.photoDimension)&height=\(self.photoDimension)")
                        let socialUser = SocialUser(id: userId, email: userDict["email"], firstName: userDict["first_name"], lastName: userDict["last_name"], avatarURL: photoURL)
                        completion(socialUser, FBSDKAccessToken.current().tokenString)
                    }
                } else {
                    self.hud.hide()
                }
            })
        }
    }
}

