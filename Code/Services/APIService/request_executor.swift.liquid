{% include 'header' %}

import Foundation
import Alamofire
import PromiseKit

class RequestExecutor {
    
    // MARK:
    fileprivate let builder: RequestBuilder
    
    fileprivate let congiguration: URLSessionConfiguration = {
        let config = URLSessionConfiguration.default
        config.httpAdditionalHeaders = SessionManager.defaultHTTPHeaders
//        if config.httpAdditionalHeaders != nil {
//            config.httpAdditionalHeaders!["x-initiator"] = "mobile"
//        }
        return config
    }()
    
    fileprivate let queue: DispatchQueue
    
    fileprivate var authToken: String?
    
    fileprivate let responseLoggingEnabled: Bool
    fileprivate let requestLoggingEnabled: Bool
    fileprivate let session: SessionManager
    fileprivate var settings: AppSettingsService
    
    //MARK:
    init(requestBuilder: RequestBuilder, settings: AppSettingsService) {
        
        self.settings = settings
        requestLoggingEnabled = settings.isRequestLoggingEnabled
        responseLoggingEnabled = settings.isResponseLoggingEnabled
        
        queue = DispatchQueue.global(qos: .utility)
        builder = requestBuilder
        session = SessionManager(configuration: congiguration)
        self.configureSession()
    }
    
    func configureSession() {
        guard let accessToken = settings.accessToken,
              let tokenType = settings.tokenType,
              let client = settings.client,
              let expiry = settings.expiry,
              let uid = settings.uid else {
//                session.adapter = UserUniqueDataStringAdapter.init()
            return
        }
        session.adapter = AccessTokenAdapter(accessToken: accessToken)
    }
    
    func proccess(accessToken: BaseHeaderResponse) {
        settings.accessToken = accessToken.accessToken
        self.configureSession()
    }
    
    // MARK:
    fileprivate func processResponse(response: DataResponse<Any>, checkToken: Bool, completion: @escaping (Any?, ApplicationBaseError?, Any?) -> Void) {
        if responseLoggingEnabled {
            print("response: %@", response.debugDescription)
            //            NSLog("response: %@", response.debugDescription)
        }
        let statusCode = response.response?.statusCode ?? 500
        if statusCode >= 200 && statusCode < 400 {
            completion(response.result.value, nil, response.response?.allHeaderFields)
        } else {
            if statusCode == 401 {
                ServicesAssembly.shared.settingsService.clear()
                NotificationCenter.default.post(name: Notifications.userLoggedOut, object: nil, userInfo: nil)
            }
            guard let data = response.data else {
                completion(nil, APIError(code: statusCode, json: response.result.value), nil)
                return
            }
            do {
                let responseJSON = try JSONSerialization.jsonObject(with: data, options: []) as? [String: Any]
                completion(nil, APIError(code: statusCode, json: responseJSON), nil)
            } catch {
                completion(nil, APIError(code: statusCode, json: response.result.value), nil)
            }
        }
    }
    
    //MARK:
    func runRequest(request: URLRequest, completion: @escaping (Any?, ApplicationBaseError?, Any?) -> Void) {
//        self.configureSession()
        if requestLoggingEnabled {
            print("request: %@", request.debugDescription)
        }
        session.request(request)
            .validate(statusCode: 200...500)
            .responseJSON(queue: queue) { (response) in
                //                String.init(data: response.data!, encoding: String.Encoding.utf8)
                self.processResponse(response: response, checkToken: true, completion: completion)
        }
    }
    
    func uploadData(toUrl url: URLConvertible, data: Data, progress: ((Double) -> Void)?,
                    completion: @escaping (Any?, ApplicationBaseError?, Any?) -> Void) {
        
        session.upload(multipartFormData: { (formData) in
            formData.append(data, withName: "file", fileName: "avatar", mimeType: "image/png")
        }, usingThreshold: UInt64.init(), to: url, method: .patch, headers: nil) { (result) in
            switch result {
            case .success(let request, _, _):
                request.validate(statusCode: [200, 400, 500])
                    .responseJSON(queue: self.queue) { (response) in
                        self.processResponse(response: response, checkToken: true, completion: completion)
                }
                
                break
            case .failure(_):
                completion(nil, ApplicationError.invalidResponse, nil)
                break
            }
            
        }
    }
    
    
    func uploadData(toUrl url: URLConvertible,
                    parametrs: [String : Any]?,
                    imageData: Data?,
                    objectKey: String,
                    httpMethod: HTTPMethod,
                    progress: ((Double) -> Void)?,
                    completion: @escaping (Any?, ApplicationBaseError?, Any?) -> Void)
    {
        session.upload(multipartFormData: { (formData) in
            if let parametrs = parametrs {
                parametrs.forEach{ (param) in
                    if let value = param.value as? String {
                        formData.append(value.data(using: String.Encoding.utf8)!, withName: "\(objectKey)[\(param.key)]")
                    }
                    else if let values = param.value as? [String] {
                        if values.count > 0 {
                            values.forEach({ (arrayItem) in
                                formData.append(arrayItem.data(using: String.Encoding.utf8)!, withName: "\(objectKey)[\(param.key)][]")
                            })
                        } else {
                            formData.append("".data(using: String.Encoding.utf8)!, withName: "\(objectKey)[\(param.key)][]")
                        }
                    }
                }
            }
            if let imageData = imageData {
                formData.append(imageData, withName: "\(objectKey)[avatar]", fileName: "image", mimeType: "image/png")
            }
        }, usingThreshold: UInt64.init(), to: url, method: httpMethod, headers: nil) { (result) in
            switch result {
            case .success(let request, _, _):
                request.validate(statusCode: [200, 400, 500])
                    .responseJSON(queue: self.queue) { (response) in
                        self.processResponse(response: response, checkToken: true, completion: completion)
                }
                
                break
            case .failure(_):
                completion(nil, ApplicationError.invalidResponse, nil)
                break
            }
            
        }
    }
}
