{% include 'header' %}

import Foundation
import ObjectMapper

struct ServerDateFormatter {
    
    static let formatter: DateFormatter = { () -> DateFormatter in
        let fmt = DateFormatter()
        fmt.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        return fmt
    }()
    
    static let transform: DateFormatterTransform = { () -> DateFormatterTransform in
        return DateFormatterTransform(dateFormatter: ServerDateFormatter.formatter)
    }()
    
    static func date2Str(date: Date) -> String {
        return formatter.string(from: date)
    }
    
}

struct UIDateFormatter {
    
    static let dateOnlyForamatter: DateFormatter = {// () -> DateFormatter in
        let fmt = DateFormatter()
        fmt.dateFormat = "dd - MM - YYYY"
        return fmt
    }()
    
    static let messageTodayTimeFormatter: DateFormatter = { () -> DateFormatter in
        let fmt = DateFormatter()
        fmt.dateFormat = "HH:mm"
        return fmt
    }()
    
    static let timeFormatter: DateFormatter = { () -> DateFormatter in
        let fmt = DateFormatter()
        fmt.dateFormat = "HH'h' mm'm'"
        return fmt
    }()
    
    static let simpleTimeFormatter: DateFormatter = { () -> DateFormatter in
        let fmt = DateFormatter()
        fmt.dateFormat = "HH:mm"
        return fmt
    }()
    
    static let formatter: DateFormatter = { () -> DateFormatter in
        let fmt = DateFormatter()
        fmt.dateFormat = "dd MMM YYYY"
        return fmt
    }()
    
    static let simpleDateFormatter: DateFormatter = { () -> DateFormatter in
        let fmt = DateFormatter()
        fmt.dateFormat = "dd MMM yyyy"
        return fmt
    }()
    
    static func dateOnly2Str(date: Date) -> String {
        return dateOnlyForamatter.string(from: date)
    }
    
    static func date2Str(date: Date) -> String {
        return formatter.string(from: date)
    }
    
    static func date2TimeStr(date: Date) -> String {
        return timeFormatter.string(from: date)
    }
    
    static func date2SimpleTimeStr(date: Date) -> String {
        return simpleTimeFormatter.string(from: date)
    }
    
    static func simpleDate2Str (date: Date) -> String {
        return simpleDateFormatter.string(from: date)
    }
    
    static let iso8601: DateFormatter = {
        let formatter = DateFormatter()
        formatter.calendar = Calendar(identifier: .iso8601)
        formatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXXX"
        return formatter
    }()
    
}

extension Date {
    
    var formattedString: String {
        return UIDateFormatter.date2Str(date: self)
    }
    
    var simpleDateFormattedString : String {
        return UIDateFormatter.simpleDate2Str(date: self)
    }
    
    var timeFormattedString: String {
        return UIDateFormatter.date2TimeStr(date: self)
    }
    
    var simpleTimeFormattedString : String { //HH:mm 19:00
        return UIDateFormatter.date2SimpleTimeStr(date : self)
    }
    
    var iso8601: String {
        return UIDateFormatter.iso8601.string(from: self)
    }
    
    var dateOnlyString: String {
        return UIDateFormatter.dateOnlyForamatter.string(from: self)
    }
    
}

extension String {
    
    var dateFromISO8601: Date? {
        return UIDateFormatter.iso8601.date(from: self)   // "Mar 22, 2017, 10:22 AM"
    }
    
}

